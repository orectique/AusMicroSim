library(data.table)
setDTthreads(10)
library(simPop)
library(readr)
library(dplyr)
sample_file <- data.table(read_csv("./Data Files/microdata.csv"))
library(readr)
ageSexIncomePostalAus <- read_csv("D:/GitHub/AusMicroSim/Data Files/ageSexIncomePostalAus.csv")
View(ageSexIncomePostalAus)
library(readr)
X2020_sample_file <- read_csv("D:/GitHub/AusMicroSim/Data Files/2020_sample_file.csv")
View(X2020_sample_file)
2L
2C
setwd("D:/GitHub/AusMicroSim")
install.packages("rmarkdown")
seed <- matrix(c(1, 2, 1, 3, 5, 5, 6, 2, 2), nrow = 3, ncol = 3)
rowMargins <- c(5, 15, 8)
colMargins <- c(11, 9, 8)
seed <- matrix(c(1, 2, 1, 3, 5, 5, 6, 2, 2), nrow = 3, ncol = 3)
seed
seed <- matrix(c(1, 2, 1, 3, 5, 5, 6, 2, 2), nrow = 3, ncol = 3, byrow = T)
seed
iter <- iter + 1
while (!all.equal(rowMargins, rowSums(seed)) & !all.equal(colMargins, colSums(seed)) & iter < 100) {
seed <- t(t(seed) * rowMargins/rowSums(seed))
seed <- seed * colMargins/colSums(seed)
iter <- iter + 1
}
ipf < function(seed, rowMargins, colMargins) {
iter <- 0
while (!all.equal(rowMargins, rowSums(seed)) & !all.equal(colMargins, colSums(seed)) & iter < 100) {
seed <- t(t(seed) * rowMargins/rowSums(seed))
seed <- seed * colMargins/colSums(seed)
iter <- iter + 1
}
}
ipf < function(seed, rowMargins, colMargins) {
iter <- 0
while (!all.equal(rowMargins, rowSums(seed)) & !all.equal(colMargins, colSums(seed)) & iter < 100) {
seed <- t(t(seed) * rowMargins/rowSums(seed))
seed <- seed * colMargins/colSums(seed)
iter <- iter + 1
}
}
ipf <- function(seed, rowMargins, colMargins) {
iter <- 0
while (!all.equal(rowMargins, rowSums(seed)) & !all.equal(colMargins, colSums(seed)) & iter < 100) {
seed <- t(t(seed) * rowMargins/rowSums(seed))
seed <- seed * colMargins/colSums(seed)
iter <- iter + 1
}
}
ipf(seed, rowMargins, colMargins)
rowSums(seed)
all.equal(rowMargins, rowSums(seed))
!all.equal(rowMargins, rowSums(seed))
~all.equal(rowMargins, rowSums(seed))
all.equal(rowMargins, rowSums(seed)) == T
while (all.equal(rowMargins, rowSums(seed)) != T & all.equal(colMargins, colSums(seed)) != T & iter < 100) {
seed <- t(t(seed) * rowMargins/rowSums(seed))
seed <- seed * colMargins/colSums(seed)
iter <- iter + 1
}
ipf <- function(seed, rowMargins, colMargins) {
iter <- 0
while (all.equal(rowMargins, rowSums(seed)) != T & all.equal(colMargins, colSums(seed)) != T & iter < 100) {
seed <- t(t(seed) * rowMargins/rowSums(seed))
seed <- seed * colMargins/colSums(seed)
iter <- iter + 1
}
}
ipf(seed, rowMargins, colMargins)
seed <- ipf(seed, rowMargins, colMargins)
seed
seed <- matrix(c(1, 2, 1, 3, 5, 5, 6, 2, 2), nrow = 3, ncol = 3, byrow = T)
seed <- ipf(seed, rowMargins, colMargins)
seed
seed <- matrix(c(1, 2, 1, 3, 5, 5, 6, 2, 2), nrow = 3, ncol = 3, byrow = T)
seed
seed * rowMargins/rowSums(seed)
seed * colMargins/colSums(seed)
seed <- seed * rowMargins/rowSums(seed)
seed
temp <- seed * colMargins/colSums(seed)
temp
temp <- t(t(seed) * colMargins/colSums(seed))
temp
while (all.equal(rowMargins, rowSums(seed)) != T & all.equal(colMargins, colSums(seed)) != T & iter < 100) {
seed <- seed * rowMargins/rowSums(seed)
seed <- t(t(seed) * colMargins/colSums(seed))
iter <- iter + 1
}
ipf <- function(seed, rowMargins, colMargins) {
iter <- 0
while (all.equal(rowMargins, rowSums(seed)) != T & all.equal(colMargins, colSums(seed)) != T & iter < 100) {
seed <- seed * rowMargins/rowSums(seed)
seed <- t(t(seed) * colMargins/colSums(seed))
iter <- iter + 1
}
}
seed <- ipf(seed, rowMargins, colMargins)
rowMargins <- c(5, 15, 8)
colMargins <- c(11, 9, 8)
seed <- matrix(c(1, 2, 1, 3, 5, 5, 6, 2, 2), nrow = 3, ncol = 3, byrow = T)
ipf <- function(seed, rowMargins, colMargins) {
iter <- 0
while (all.equal(rowMargins, rowSums(seed)) != T & all.equal(colMargins, colSums(seed)) != T & iter < 100) {
seed <- seed * rowMargins/rowSums(seed)
seed <- t(t(seed) * colMargins/colSums(seed))
iter <- iter + 1
}
}
seed <- ipf(seed, rowMargins, colMargins)
seed
print(seed)
iter <- iter + 1
while (all.equal(rowMargins, rowSums(seed)) != T & all.equal(colMargins, colSums(seed)) != T & iter < 100) {
seed <- seed * rowMargins/rowSums(seed)
seed <- t(t(seed) * colMargins/colSums(seed))
print(seed)
iter <- iter + 1
}
ipf <- function(seed, rowMargins, colMargins) {
iter <- 0
while (all.equal(rowMargins, rowSums(seed)) != T & all.equal(colMargins, colSums(seed)) != T & iter < 100) {
seed <- seed * rowMargins/rowSums(seed)
seed <- t(t(seed) * colMargins/colSums(seed))
print(seed)
iter <- iter + 1
}
}
seed <- ipf(seed, rowMargins, colMargins)
seed <- matrix(c(1, 2, 1, 3, 5, 5, 6, 2, 2), nrow = 3, ncol = 3, byrow = T)
ipf <- function(seed, rowMargins, colMargins) {
iter <- 0
while (all.equal(rowMargins, rowSums(seed)) != T & all.equal(colMargins, colSums(seed)) != T & iter < 100) {
seed <- seed * rowMargins/rowSums(seed)
seed <- t(t(seed) * colMargins/colSums(seed))
print(seed)
iter <- iter + 1
}
}
seed <- ipf(seed, rowMargins, colMargins)
for (i in 1:100) {
seed <- seed * rowMargins/rowSums(seed)
seed <- t(t(seed) * colMargins/colSums(seed))
print(seed)
iter <- iter + 1
}
ipf <- function(seed, rowMargins, colMargins) {
iter <- 0
#while (all.equal(rowMargins, rowSums(seed)) != T & all.equal(colMargins, colSums(seed)) != T & iter < 100) {
for (i in 1:100) {
seed <- seed * rowMargins/rowSums(seed)
seed <- t(t(seed) * colMargins/colSums(seed))
print(seed)
iter <- iter + 1
}
}
seed <- ipf(seed, rowMargins, colMargins)
seed <- matrix(c(1, 2, 1, 3, 5, 5, 6, 2, 2), nrow = 3, ncol = 3, byrow = T)
ipf <- function(seed, rowMargins, colMargins) {
iter <- 0
#while (all.equal(rowMargins, rowSums(seed)) != T & all.equal(colMargins, colSums(seed)) != T & iter < 100) {
for (i in 1:100) {
seed <- seed * rowMargins/rowSums(seed)
seed <- t(t(seed) * colMargins/colSums(seed))
print(seed)
iter <- iter + 1
}
}
seed <- ipf(seed, rowMargins, colMargins)
seed <- matrix(c(1, 2, 1, 3, 5, 5, 6, 2, 2), nrow = 3, ncol = 3, byrow = T)
ipf <- function(seed, rowMargins, colMargins) {
iter <- 0
while ((all.equal(rowMargins, rowSums(seed)) != T) & (all.equal(colMargins, colSums(seed)) != T) & (iter < 100)) {
#for (i in 1:100) {
seed <- seed * rowMargins/rowSums(seed)
seed <- t(t(seed) * colMargins/colSums(seed))
print(seed)
iter <- iter + 1
}
}
seed <- ipf(seed, rowMargins, colMargins)
seed <- matrix(c(1, 2, 1, 3, 5, 5, 6, 2, 2), nrow = 3, ncol = 3, byrow = T)
ipf <- function(seed, rowMargins, colMargins) {
iter <- 0
while ((all.equal(rowMargins, rowSums(seed)) == T) & (all.equal(colMargins, colSums(seed)) == T) & (iter < 100)) {
#for (i in 1:100) {
seed <- seed * rowMargins/rowSums(seed)
seed <- t(t(seed) * colMargins/colSums(seed))
iter <- iter + 1
}
}
seed <- ipf(seed, rowMargins, colMargins)
seed
while ((all.equal(rowMargins, rowSums(seed)) == F) & (all.equal(colMargins, colSums(seed)) == F) & (iter < 100)) {
#for (i in 1:100) {
seed <- seed * rowMargins/rowSums(seed)
seed <- t(t(seed) * colMargins/colSums(seed))
iter <- iter + 1
}
ipf <- function(seed, rowMargins, colMargins) {
iter <- 0
while ((all.equal(rowMargins, rowSums(seed)) == F) & (all.equal(colMargins, colSums(seed)) == F) & (iter < 100)) {
#for (i in 1:100) {
seed <- seed * rowMargins/rowSums(seed)
seed <- t(t(seed) * colMargins/colSums(seed))
iter <- iter + 1
}
}
ipf <- function(seed, rowMargins, colMargins) {
iter <- 0
while ((all.equal(rowMargins, rowSums(seed)) == F) & (all.equal(colMargins, colSums(seed)) == F) & (iter < 100)) {
#for (i in 1:100) {
seed <- seed * rowMargins/rowSums(seed)
seed <- t(t(seed) * colMargins/colSums(seed))
iter <- iter + 1
}
}
seed <- matrix(c(1, 2, 1, 3, 5, 5, 6, 2, 2), nrow = 3, ncol = 3, byrow = T)
seed <- ipf(seed, rowMargins, colMargins)
all.equal(rowMargins, rowSums(seed)) == T
seed
while ((all.equal(rowMargins, rowSums(seed)) == F) & (all.equal(colMargins, colSums(seed)) == F) {# & (iter < 100)) {
while ((all.equal(rowMargins, rowSums(seed)) == F) & (all.equal(colMargins, colSums(seed)) == F)) {# & (iter < 100)) {
#for (i in 1:100) {
seed <- seed * rowMargins/rowSums(seed)
seed <- t(t(seed) * colMargins/colSums(seed))
iter <- iter + 1
}
ipf <- function(seed, rowMargins, colMargins) {
iter <- 0
while ((all.equal(rowMargins, rowSums(seed)) == F) & (all.equal(colMargins, colSums(seed)) == F)) {# & (iter < 100)) {
#for (i in 1:100) {
seed <- seed * rowMargins/rowSums(seed)
seed <- t(t(seed) * colMargins/colSums(seed))
iter <- iter + 1
}
}
seed <- matrix(c(1, 2, 1, 3, 5, 5, 6, 2, 2), nrow = 3, ncol = 3, byrow = T)
seed <- ipf(seed, rowMargins, colMargins)
seed
seed <- matrix(c(1, 2, 1, 3, 5, 5, 6, 2, 2), nrow = 3, ncol = 3, byrow = T)
(all.equal(rowMargins, rowSums(seed)) == F) & (all.equal(colMargins, colSums(seed)) == F)
(all.equal(rowMargins, rowSums(seed)) == F) )#& (all.equal(colMargins, colSums(seed)) == F)
(all.equal(rowMargins, rowSums(seed)) == F) )#& (all.equal(colMargins, colSums(seed)) == F)
(all.equal(rowMargins, rowSums(seed)) == F) #& (all.equal(colMargins, colSums(seed)) == F)
(all.equal(rowMargins, rowSums(seed)) == T) #& (all.equal(colMargins, colSums(seed)) == F)
(all.equal(rowMargins, rowSums(seed)) == TRUE) #& (all.equal(colMargins, colSums(seed)) == F)
(all.equal(rowMargins, rowSums(seed)) == FALSE) #& (all.equal(colMargins, colSums(seed)) == F)
(all.equal(rowMargins, rowSums(seed))) #& (all.equal(colMargins, colSums(seed)) == F)
(all.equal(rowMargins, rowSums(seed)) != T) #& (all.equal(colMargins, colSums(seed)) == F)
while ((all.equal(rowMargins, rowSums(seed), 0.001) != T) & (all.equal(colMargins, colSums(seed)) != T) & (iter < 100)) {
#for (i in 1:100) {
seed <- seed * rowMargins/rowSums(seed)
seed <- t(t(seed) * colMargins/colSums(seed))
iter <- iter + 1
}
ipf <- function(seed, rowMargins, colMargins) {
iter <- 0
while ((all.equal(rowMargins, rowSums(seed), 0.001) != T) & (all.equal(colMargins, colSums(seed)) != T) & (iter < 100)) {
#for (i in 1:100) {
seed <- seed * rowMargins/rowSums(seed)
seed <- t(t(seed) * colMargins/colSums(seed))
iter <- iter + 1
}
}
seed <- matrix(c(1, 2, 1, 3, 5, 5, 6, 2, 2), nrow = 3, ncol = 3, byrow = T)
seed <- ipf(seed, rowMargins, colMargins)
seed
seed <- matrix(c(1, 2, 1, 3, 5, 5, 6, 2, 2), nrow = 3, ncol = 3, byrow = T)
(all.equal(rowMargins, rowSums(seed), 0.001) != T) & (all.equal(colMargins, colSums(seed)) != T)
seed <- ipf(seed, rowMargins, colMargins)
seed
rowMargins <- c(5, 15, 8)
colMargins <- c(11, 9, 8)
ipf <- function(seed, rowMargins, colMargins) {
iter <- 0
while ((all.equal(rowMargins, rowSums(seed), 0.001) != T) & (all.equal(colMargins, colSums(seed)) != T) & (iter < 100)) {
#for (i in 1:100) {
seed <- seed * rowMargins/rowSums(seed)
seed <- t(t(seed) * colMargins/colSums(seed))
iter <- iter + 1
}
}
seed <- matrix(c(1, 2, 1, 3, 5, 5, 6, 2, 2), nrow = 3, ncol = 3, byrow = T)
(all.equal(rowMargins, rowSums(seed), 0.001) != T) & (all.equal(colMargins, colSums(seed)) != T)
seed <- ipf(seed, rowMargins, colMargins)
seed
(all.equal(rowMargins, rowSums(seed), 0.001) != T) & (all.equal(colMargins, colSums(seed)) != T) & (iter < 100)
seed <- matrix(c(1, 2, 1, 3, 5, 5, 6, 2, 2), nrow = 3, ncol = 3, byrow = T)
(all.equal(rowMargins, rowSums(seed), 0.001) != T) & (all.equal(colMargins, colSums(seed)) != T) & (iter < 100)
