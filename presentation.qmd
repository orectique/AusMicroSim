---
title: "On Beach-houses and Savings"
subtitle: "Exploring The Distributional Impacts of Stage 3 Tax Cuts"
author: "Sreehari Pulickamadhom Sreedhar"
format: 
  revealjs:
    theme: simple
editor: visual
---

## Overview

-   Background information

-   Microsimulation?

-   Data and preprocessing

-   Weighting and simulation

## What are the Stage 3 Tax Cuts?

-   Third stage of tax plan introduced by the Morrison Government.

::: {style="font-size: 20px; padding : 5%"}
| Taxable income thresholds (July 2022) | Tax rate | Taxable income thresholds (July 2024) | Tax rate |
|---------------------------------------|----------|---------------------------------------|----------|
| \<= \$18200                           | Nil      | \<= \$18200                           | Nil      |
| \$18,201 - \$45,000                   | 19%      | \$18,201 - \$45,000                   | 19%      |
| \$45,001 - \$120,000                  | 32.5%    | \$45,001 - \$200,000                  | 30%      |
| \$120,001 - \$180,000                 | 37%      | \-                                    | \-       |
| \$180,001 \<=                         | 45%      | \$200,001 \<=                         | 45%      |
:::

[Maps](https://orectique.github.io/AusMicroSim)

## Getting into microsimulation

-   What?

-   Why?

-   Where?

-   Why not?

> https://microsimulation.pub/articles/00246

## What about the data?

Seed (Sample) - 2% Sample file (ATO, 2021)

Constraints (Margins) - Census of Population and Housing (ABS, 2021)

Â 

::: {style="font-size: 20px"}
##### - Constructing a synthetic population

> 1\. Weighting (IPF)\
> 2. Create synthetic population\
> 3. Add continuous variables\
> 4. Add categorical variables\
> 5. Adjust synthetic population\
> 6. Simulate tax policies
:::

## Weighting and Creating synthetic population

-   Iterative proportional fitting (raking) was used to weigh individuals in the seed against known margins.

-   Individual characteristics - Age, Gender, Region, Partner (Boolean)

-   Sampling from seed to create synthetic population

## Iterative proportional fitting

-   Iterative procedure to adjust matrix such that rows and columns sum to known marginals

-   Example

|     |     |     |     |
|-----|:---:|:---:|:---:|
|     | 11  |  9  |  8  |
| 5   |  1  |  2  |  1  |
| 15  |  3  |  5  |  5  |
| 8   |  6  |  2  |  2  |

## IPF (contd.)

``` python
import numpy as np

rowSums = np.array([5, 15, 8]).T
colSums = np.array([11, 9, 8])

seed = np.array([[1, 2, 1], [3, 5, 5], [6, 2, 2]])

def ipf(seed, rowSums, colSums):
    
    iter = 0
    while (~np.allclose(rowSums, np.sum(seed, axis = 1), 0.001) and  ~np.allclose(colSums, np.sum(seed, axis = 0)), 0.001) and iter < 100:

        seed = (seed.T * (rowSums / np.sum(seed, axis = 1))).T
        seed = (seed * (colSums / np.sum(seed, axis = 0)))
        iter += 1

    return seed
  
ipf(seed, rowSums, colSums)
```

```{python}
import numpy as np

rowSums = np.array([5, 15, 8]).T
colSums = np.array([11, 9, 8])

seed = np.array([[1, 2, 1], [3, 5, 5], [6, 2, 2]])

def ipf(seed, rowSums, colSums):
    
    iter = 0
    while (~np.allclose(rowSums, np.sum(seed, axis = 1), 0.001) and  ~np.allclose(colSums, np.sum(seed, axis = 0)), 0.001) and iter < 100:

        seed = (seed.T * (rowSums / np.sum(seed, axis = 1))).T
        seed = (seed * (colSums / np.sum(seed, axis = 0)))
        iter += 1

    return seed
  
ipf(seed, rowSums, colSums)
```

## Adding variables

-   Taxable income was added as a continuous variable using linear models with random error terms

-   Individual occupation was added as a categorical variable using xgboost

## Adjusting synthetic population

-   Simulate population at postcode level while respecting regional margins

-   Minimize differences between observed and simulated margins (Simulated Annealing)

    -   Randomly swap individuals

    -   If necessary, generate new individuals for replacement

## Simulate tax policies

-   Apply Stage 3 tax policy along with counterfactuals

    -   July 2018

    -   July 2022

    -   July 2024

-   Max savings: \$9075
